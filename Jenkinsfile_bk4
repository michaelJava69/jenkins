pipeline {
    agent any
    parameters {
         
        choice(name: 'UP_ENVIRONMENT', 
          choices: 'dev\nlocal',
          description: 'What environment?')
        choice(name: 'UP_GIT_BRANCH', 
          choices: 'tester\njenkins-tester',
          description: 'What environment?')
        choice(name: 'UP_DOCKER_REGISTRY', 
          choices: 'registry.mydocker.ga\nlocalhost:5000',
          description: 'What registry?')
        choice(name: 'UP_CONTAINER_NAME', 
          choices: 'testcontainer\ndevcontainer',
          description: 'What container?')
        choice(name: 'DEFAULT_REPO', 
          choices: 'git@gitlab.platform-engineering.com:opportunities/container-pipeline/sample-project.git',
          description: 'What project repo?')
        choice(name: 'UP_DOCKER_LINTER', 
          choices: 'hadolint\nprojectatomic\nfromlatest',
          description: 'What lint tool do you want to use?')  
        choice(name: 'UP_DOCKER_SCANNER', 
          choices: 'trivy\nanchore',
          description: 'What scanner tool do you want to use?')  
         
         
        booleanParam(name: 'REGISTER_IMAGE',
          defaultValue: true,
          description: 'Checkbox parameter')
          
         
          
    }
    


    environment {
       CITOOL = "true"
       USER = "michaelugbechie"
       CONTAINER="${UP_CONTAINER_NAME}"                                 
       REPO="${DEFAULT_REPO}"                                         

       BRANCH="${UP_GIT_BRANCH}"                                        
       REGISTRY="${UP_DOCKER_REGISTRY}"                                   

       REGISTERIMAGE="${REGISTER_IMAGE}"                                      
       ENVIRONMENT="${UP_ENVIRONMENT}"                                          

       LINTER="${UP_DOCKER_LINTER}"   
       SCANNER="${UP_DOCKER_SCANNER}"
        
    }
    
      
    stages {

       stage('Clean Workspace') {
           steps {
               // Clean the workspace
               sh 'echo "clean workspace"'
               cleanWs()

           }
       }



       stage('Parallel Repositories clone') {
            parallel {
                stage('Clone Registry ') {
                   steps {
                        sh 'mkdir -p Assurance/Source_Code_Repo/registry'             
                        dir("Assurance/Source_Code_Repo/registry")
                        {
                            git branch: "master",
                            credentialsId: 'gitlab',
                            url: 'git@gitlab.platform-engineering.com:opportunities/container-pipeline/assurance/source_code_repo/registry.git'
                        }
                    }
                }
                stage('Clone Docker lint') {
                    steps {
                          sh 'mkdir -p Assurance/Source_Code_Repo/docker-lint'             
                          dir("Assurance/Source_Code_Repo/docker-lint")
                          {
                                git branch: "master",
                                credentialsId: 'gitlab',
                                url: 'git@gitlab.platform-engineering.com:opportunities/container-pipeline/assurance/source_code_repo/docker-lint.git'
                          }
                     }
                }
                stage('Clone CommonFunctions') {
                    steps {
                         sh 'mkdir -p Functionality/Source_Code_Repo/common-functions'
                         dir("Functionality/Source_Code_Repo/common-functions")
                         {
                            git branch: "master",
                            credentialsId: 'gitlab',
                            url: 'git@gitlab.platform-engineering.com:opportunities/container-pipeline/functionality/source-code-repo/common-functions.git'
                         }
                     }
                }
                stage('Clone ComponentLogging') {
                    steps {
                        sh 'mkdir -p Functionality/Source_Code_Repo/component-logging'
                        dir("Functionality/Source_Code_Repo/component-logging")
                        {
                            git branch: "master",
                            credentialsId: 'gitlab',
                            url: 'git@gitlab.platform-engineering.com:opportunities/container-pipeline/functionality/source-code-repo/component-logging.git'
                        }
                    }
                }
            }
        }
        
       stage('Clone BrassHand and run pipeline') {
        steps {
            sh 'mkdir -p brass-hand'
            dir("brass-hand")
            {
                git branch: "master",
                credentialsId: 'gitlab',
                url: 'git@gitlab.platform-engineering.com:opportunities/container-pipeline/brass-hand.git'
                withDockerRegistry([credentialsId: 'registry', url: "http://registry.mydocker.ga"]) {
                   sshagent(credentials: ['gitlab']) {
                      script {
                         try {
                             
                            
                            sh './run_pipeline.sh  '
                         } catch (Exception e) {
                             echo ' - Jenkins Build Broken '
                             currentBuild.result = ' FAILURE '
                         }
                      }
                   
                      // sh './run_pipeline.sh'
                      sh 'echo $pwd " is workspace"'
                   }  
                }
            }
         }
       }

    }
}
